
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

PHOTO, RESULT_TEXT, TOURNAMENT = range(3)
NAME, PHONE, NICK = range(3, 6)

GROUP_CHAT_USERNAME = "@resultssuperlauhe"
ADMIN_USERNAME = "@ivanryashin"
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –°—É–ø–µ—Ä–ª–∏–≥–∏!\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚öΩ /result ‚Äì üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "üìù /register ‚Äì ‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç /result:\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –º–∞—Ç—á–∞\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–Ω–∞–∫–æ 3:0 –ë–∞—Ä—Å–µ–ª–æ–Ω–∞)\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä\n"
        "üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ\n\n"
        "üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç /register:\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è\n"
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "üîó –í–≤–µ–¥–∏—Ç–µ Telegram-–Ω–∏–∫\n"
        "üì¨ –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É"
    )
    await update.message.reply_text(text)

async def result_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –º–∞—Ç—á–∞")
    return PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    user_data[update.effective_user.id] = {'photo': photo}
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–Ω–∞–∫–æ 3:0 –ë–∞—Ä—Å–µ–ª–æ–Ω–∞)")
    return RESULT_TEXT

async def handle_result_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id]['result_text'] = update.message.text

    keyboard = [[
        InlineKeyboardButton("–†–µ–≥—É–ª—è—Ä–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç", callback_data='–†–µ–≥—É–ª—è—Ä–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç'),
        InlineKeyboardButton("–ö—É–±–æ–∫", callback_data='–ö—É–±–æ–∫')
    ], [
        InlineKeyboardButton("–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤", callback_data='–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤'),
        InlineKeyboardButton("–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã", callback_data='–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:", reply_markup=reply_markup)
    return TOURNAMENT

async def handle_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tournament = query.data
    data = user_data.get(query.from_user.id, {})

    caption = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞: {data.get('result_text')}\nüèÜ –¢—É—Ä–Ω–∏—Ä: {tournament}"
    await context.bot.send_photo(
        chat_id=GROUP_CHAT_USERNAME,
        photo=data.get('photo'),
        caption=caption
    )

    await query.edit_message_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!")
    return ConversationHandler.END

async def application_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    return NAME

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id] = {'name': update.message.text}
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id]['phone'] = update.message.text
    await update.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π @–Ω–∏–∫ –≤ Telegram:")
    return NICK

async def handle_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = user_data.get(update.effective_user.id, {})
    data['nick'] = update.message.text

    message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –ò–º—è: {data.get('name')}, –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}, –ù–∏–∫: {data.get('nick')}"
    await context.bot.send_message(chat_id=ADMIN_USERNAME, text=message)
    await update.message.reply_text("üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

app = ApplicationBuilder().token("8174104659:AAGyXNs81m-pvaKXisKIdIaGGIV5rBj6uxQ").build()

app.add_handler(CommandHandler("start", start))

result_conv = ConversationHandler(
    entry_points=[CommandHandler("result", result_start)],
    states={
        PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
        RESULT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_result_text)],
        TOURNAMENT: [CallbackQueryHandler(handle_tournament)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
app.add_handler(result_conv)

application_conv = ConversationHandler(
    entry_points=[CommandHandler("register", application_start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
        NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_nick)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
app.add_handler(application_conv)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()